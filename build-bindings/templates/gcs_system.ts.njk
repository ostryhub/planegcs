// This library provides WebAssembly bindings for the FreeCAD's geometric solver library planegcs.
// Copyright (C) 2023  Miroslav Šerý, Salusoft89 <miroslav.sery@salusoft89.cz>  
// Copyright (C) 2023  Jiří Hon, Salusoft89 <jiri.hon@salusoft89.cz>  

// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.

// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.

// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA

import { {% for enum_name in import_enums %}{{ enum_name }}, {% endfor -%} } from "./enums";

export interface DoubleVector {
    get: (i: number) => number;
    size: () => number;
    delete: () => void;
    push_back: (val: number) => void;
}
export interface IntVector {
    get: (i: number) => number;
    size: () => number;
    delete: () => void;
    push_back: (val: number) => void;
}

{%- for cls in geom_classes -%}
{% if cls.base %}
export type {{ cls.name }} = {{ cls.base }};
{%- else %}
export interface {{ cls.name }} {
    delete: () => void;
}
{%- endif %}
{%- endfor %}

export type GcsGeometry = {% for cls in geom_classes %}{{ cls.name }}{% if not loop.last %} | {% endif %}{% endfor %};

export interface GcsSystem {
{% for func in fn_ts_bindings %}
    {{ func.fname }}: ({{ func.args }}) => {{ func.return_type }};
{%- endfor %}
    /* B-Spline helpers */
    make_bspline: (startx_i: number, starty_i: number, endx_i: number, endy_i: number,
                   poles_xy_i: IntVector, weights_i: IntVector, knots_i: IntVector,
                   mult: IntVector, degree: number, periodic: boolean) => BSpline;
    add_constraint_tangent_at_bspline_knot: ( b: BSpline,  l: Line, knotindex: number,
        tagId: number, driving: boolean, scale: number) => void;
    add_constraint_point_on_bspline: ( p: Point,  b: BSpline, pointparam_param_i: number,
        tagId: number, driving: boolean, scale: number) => void;
    add_constraint_internal_alignment_bspline_control_point: ( b: BSpline, c: Circle,
        poleindex: number, tag: number, driving: boolean, scale: number) => void;
    add_constraint_internal_alignment_knot_point: ( b: BSpline,  p: Point,
        knotindex: number, tagId: number, driving: boolean, scale: number) => void;
    delete: () => void;
}

export interface GcsSystemConstructor {
    new (): GcsSystem;
}

export interface DoubleVectorConstructor {
    new (): DoubleVector;
}

export interface IntVectorConstructor {
    new (): IntVector;
}